/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.virtual-secrets.dev/apimachinery/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretMetadataLister helps list SecretMetadatas.
// All objects returned here must be treated as read-only.
type SecretMetadataLister interface {
	// List lists all SecretMetadatas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretMetadata, err error)
	// SecretMetadatas returns an object that can list and get SecretMetadatas.
	SecretMetadatas(namespace string) SecretMetadataNamespaceLister
	SecretMetadataListerExpansion
}

// secretMetadataLister implements the SecretMetadataLister interface.
type secretMetadataLister struct {
	indexer cache.Indexer
}

// NewSecretMetadataLister returns a new SecretMetadataLister.
func NewSecretMetadataLister(indexer cache.Indexer) SecretMetadataLister {
	return &secretMetadataLister{indexer: indexer}
}

// List lists all SecretMetadatas in the indexer.
func (s *secretMetadataLister) List(selector labels.Selector) (ret []*v1alpha1.SecretMetadata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretMetadata))
	})
	return ret, err
}

// SecretMetadatas returns an object that can list and get SecretMetadatas.
func (s *secretMetadataLister) SecretMetadatas(namespace string) SecretMetadataNamespaceLister {
	return secretMetadataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretMetadataNamespaceLister helps list and get SecretMetadatas.
// All objects returned here must be treated as read-only.
type SecretMetadataNamespaceLister interface {
	// List lists all SecretMetadatas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretMetadata, err error)
	// Get retrieves the SecretMetadata from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretMetadata, error)
	SecretMetadataNamespaceListerExpansion
}

// secretMetadataNamespaceLister implements the SecretMetadataNamespaceLister
// interface.
type secretMetadataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretMetadatas in the indexer for a given namespace.
func (s secretMetadataNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretMetadata, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretMetadata))
	})
	return ret, err
}

// Get retrieves the SecretMetadata from the indexer for a given namespace and name.
func (s secretMetadataNamespaceLister) Get(name string) (*v1alpha1.SecretMetadata, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretmetadata"), name)
	}
	return obj.(*v1alpha1.SecretMetadata), nil
}
